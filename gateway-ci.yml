---
resource_types:
- name: kubernetes
  type: docker-image
  source:
    repository: zlabjp/kubernetes-resource
    tag: "1.9"


resources:
- name: skeleton
  type: git
  source:
    uri: https://github.com/silvam11/ngci-app
    branch: russed5-update
    skip_ssl_verification: true

# - name: resource-pytest
  # type: git
  # source:
    # uri: https://eos2git.cec.lab.emc.com/VCE-Symphony/revere-seed3-papp
    # branch: master
    # username: ((RegistryUser))
    # password: ((RegistryPass))
    # skip_ssl_verification: true

- name: k8s
  type: kubernetes
  source:
    server: https://192.168.99.100:8443
    namespace: default
    token: ((k8stoken))
    certificate_authority: ((k8scertificate))

- name: web-gateway-image
  type: docker-image
  source:
    repository: 192.168.99.100:5000/ngci/web-gateway
    insecure_registries: [ "192.168.99.100:5000" ]

- name: system-model-image
  type: docker-image
  source:
    repository: 192.168.99.100:5000/ngci/system-model
    insecure_registries: [ "192.168.99.100:5000" ]

jobs:
# Unit tests need to be written
# - name: job-unit-test
  # public: true
  # serial: true
  # plan:
  # - get: skeleton
    # trigger: true
  # - task: unittests
    # file: skeleton/task_run_tests.yml

- name: job-build-web-gateway
  public: true
  serial: true
  plan:
  - get: skeleton
    # passed: [job-unit-test]
    trigger: true
  - task: buildexecutable
    params:
      SERVICE_NAME: web-gateway
    file: skeleton/ci_tasks/task_build_executable.yml
  - put: web-gateway-image
    params:
      tag: skeleton/version.txt
      build: binaries

- name: job-build-system-model
  public: true
  serial: true
  plan:
  - get: skeleton
    # passed: [job-unit-test]
    trigger: true
  - task: buildexecutable
    params:
      SERVICE_NAME: system-model
    file: skeleton/ci_tasks/task_build_executable.yml
  - put: system-model-image
    params:
      tag: skeleton/version.txt
      build: binaries
#  - put: k8s
#    params:
#      kubectl: run web-gateway --image=ngci/web-gateway
#      wait_until_ready: 90
#      #wait_until_ready_selector: app=test
#    on_failure:
#      put: k8s
#      params:
#        kubectl: delete deploy web-gateway
#  - put: k8s
#    params:
#      kubectl: expose deploy test --port=80 --target-port=8080
#    on_failure:
#      put: k8s
#      params:
#        kubectl: delete svc test
#
- name: job-k8s-test
  public: true
  serial: true
  plan:
  - get: skeleton
    passed: [job-build-web-gateway]
    passed: [job-build-system-model]
    trigger: true
  - put: k8s
    params:
      kubectl: apply -f skeleton/deployments.yml
      namespace: ngci
      wait_until_ready_selector: web-gateway
      wait_until_ready_selector: system-model
    on_failure:
      put: k8s
      params:
        kubectl: delete -f skeleton/deployments.yml
#  - put: k8s
#    params:
#      kubectl: apply -f skeleton/services.yml
#      namespace: ngci
#      wait_until_ready_interval: 10
#    on_failure:
#      put: k8s
#      params:
#        namespace: ngci
#        kubectl: delete -f skeleton/services.yml
#  - put: k8s
#    params:
#      kubectl: apply -f skeleton/ngci-gateway.yml
#      namespace: ngci
#      wait_until_ready_interval: 10
#    on_failure:
#      put: k8s
#      params:
#        namespace: ngci
#        kubectl: delete -f skeleton/ngci-gateway.yml
#  - put: k8s
#    params:
#      kubectl: apply -f skeleton/ngci-virtual-service.yml
#      namespace: ngci
#      wait_until_ready_interval: 10
#    on_failure:
#      put: k8s
#      params:
#        namespace: ngci
#        kubectl: delete -f skeleton/ngci-virtual-service.yml




#- name: job-integration-test
#  public: true
#  serial: true
#  plan:
#  - get: gitlab_repo
#    passed: [job-build-deploy]
#    trigger: true
#  - task: tests
#    file: gitlab_repo/ci/task_run_integration_tests.yml
#    ensure:
#      do:
#      - put: k8s
#        params:
#          kubectl: delete deploy test
#      - put: k8s
#        params:
#          kubectl: delete svc test


# - name: test1
  # public: true
  # plan:
  # - get: resource-pytest
    # trigger: true
  # - task: test1task1
    # params:
      # TEST_SUITE_NAME: SampleCode
      # TEST_SUITE_TYPE: ((test-suite-type))
      # TEST_ENV: ((test-environment))
    # file: resource-pytest/integtest.yml

# - name: test2
  # public: true
  # plan:
  # - get: resource-pytest
    # passed: [test1]
    # trigger: true
  # - task: test2task1
    # params:
      # TEST_SUITE: ((test-suite))
      # TEST_ENV: ((test-environment))
    # file: resource-pytest/integtest.yml
